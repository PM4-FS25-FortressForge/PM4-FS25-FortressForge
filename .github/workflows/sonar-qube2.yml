name: SonarQube Scan

on:
  pull_request:
    branches:
      - main

jobs:
  runAllTests:
    name: ${{ matrix.unityVersion }} integration tests
    runs-on: ubuntu-latest
    timeout-minutes: 15
    strategy:
      fail-fast: false
      matrix:
        testMode:
          - editmode
        unityVersion:
          - 6000.0.37f1
    steps:
      - name: Checkout Unity project repository
        uses: actions/checkout@v4
        with:
          repository: "PM4-FS25-FortressForge/PM4-FS25-FortressForge"
          fetch-depth: 0
          ref: main
          token: ${{ secrets.PAT_ACTION }}

      - name: Cache Project
        uses: actions/cache@v3
        with:
          path: Library
          key: Library-${{ hashFiles('Assets/**', 'Packages/**', 'ProjectSettings/**') }}
          restore-keys: |
            Library-

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install openupm-cli
        run: npm install -g openupm-cli

      - name: Setup .NET Core
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '6.0.x'

      - name: Setup SonarScanner for .NET
        run: dotnet tool install --global dotnet-sonarscanner

      - name: Begin SonarQube Analysis
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        run: |
          dotnet-sonarscanner.MSBuild.exe begin /k:"FortressForge" /d:sonar.host.url="${{ env.SONAR_HOST_URL }}" /d:sonar.login="${{ env.SONAR_TOKEN }}"

      - name: Build Solution
        run: |
          # Ensure the Unity project generates the .sln and .csproj files before this step
          MSBuild.exe FortressForge.sln /p:Configuration=Release /t:Rebuild

      - name: End SonarQube Analysis
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: dotnet-sonarscanner.MSBuild.exe end /d:sonar.login="${{ env.SONAR_TOKEN }}"
